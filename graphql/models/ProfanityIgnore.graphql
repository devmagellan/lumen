type ProfanityIgnore {
    id: ID
    profanity: Profanity! @belongsTo
    userIgnored: User @belongsTo
    firmIgnored: Firm @belongsTo
    network_ignored_id: String
    user: User @belongsTo
}

extend type Query @middleware(checks: ["auth"]) {
    profanityIgnores: [ProfanityIgnore]!
        @field(resolver: "ProfanityIgnoreQuery@all")
        @middleware(checks: ["permission:list-ignore-profanities"])

    profanityIgnore(id: ID): ProfanityIgnore!
        @field(resolver: "ProfanityIgnoreQuery@find")
        @middleware(checks: ["permission:view-ignore-profanities"])
}

extend type Mutation @middleware(checks: ["auth"]) {
    createProfanityIgnore(
        profanity_id: ID
        user_ignored_id: ID
        firm_ignored_id: ID
        network_ignored_id: String
    ): ProfanityIgnore
        @field(resolver: "WGT\\GraphQL\\Mutations\\Profanity\\ProfanityIgnoreMutator@create")
        @middleware(checks: ["permission:create-ignore-profanities"])
        @profanityIgnoreCreateValidation

    updateProfanityIgnore(
        id: ID!,
        profanity_id: ID
        user_ignored_id: ID
        firm_ignored_id: ID
        network_ignored_id: String
    ): ProfanityIgnore
        @field(resolver: "WGT\\GraphQL\\Mutations\\Profanity\\ProfanityIgnoreMutator@update")
        @middleware(checks: ["permission:update-ignore-profanities"])
        @profanityIgnoreUpdateValidation

    deleteProfanityIgnore(id: ID!): MessageResponse!
        @field(resolver: "WGT\\GraphQL\\Mutations\\Profanity\\ProfanityIgnoreMutator@delete")
        @middleware(checks: ["permission:delete-ignore-profanities"])
}
