type Template {
    id: ID
    name: String!
    user: User! @belongsTo
}

extend type Query @middleware(checks: ["auth"]) {
    templates: [Template]!
        @field(resolver: "TemplateQuery@all")
        @middleware(checks: ["permission:list-templates"])

    template(id: ID): Template!
        @field(resolver: "TemplateQuery@find")
        @middleware(checks: ["permission:view-templates"])
}

extend type Mutation @middleware(checks: ["auth"]) {
    createTemplate(
        name: String @rules(apply: ["required", "min:2", "max:255"])
    ): Template
        @middleware(checks: ["permission:create-templates"])
        @field(resolver: "TemplateMutator@create")

    updateTemplate(
        id: ID,
        name: String
    ): Template
        @field(resolver: "TemplateMutator@update")
        @middleware(checks: ["permission:update-templates"])
        @templateCreateValidation

    deleteTemplate(id: ID!): MessageResponse!
        @field(resolver: "TemplateMutator@delete")
        @middleware(checks: ["permission:delete-templates"])
}
