type Profanity {
    id: ID
    word: String!
    user: User! @belongsTo
}

extend type Query @middleware(checks: ["auth"]) {
    profanities: [Profanity]!
        @field(resolver: "ProfanityQuery@all")
        @middleware(checks: ["permission:list-profanities"])

    profanity(id: ID): Profanity!
        @field(resolver: "ProfanityQuery@find")
        @middleware(checks: ["permission:view-profanities"])
}

extend type Mutation @middleware(checks: ["auth"]) {
    createProfanity(
        word: String @rules(apply: ["required", "unique:profanities", "min:2", "max:255"])
    ): Profanity
        @middleware(checks: ["permission:create-profanities"])
        @field(resolver: "ProfanityMutator@create")

    updateProfanity(
        id: ID!,
        word: String
    ): Profanity
        @field(resolver: "ProfanityMutator@update")
        @middleware(checks: ["permission:update-profanities"])
        @updateProfanityValidation

    deleteProfanity(id: ID!): MessageResponse!
        @field(resolver: "ProfanityMutator@delete")
}
