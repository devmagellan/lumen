type Profanity {
    id: ID
    word: String!
    user: User! @belongsTo
}

extend type Query @middleware(checks: ["auth"]) {
    profanity(id: ID! @eq): Profanity @find
        @middleware(checks: ["permission:view-profanities"])

    profanities(
        id: String @where(operator: "LIKE")
        word: String @where(operator: "LIKE")
        trashed: Trashed @trashed
    ): [Profanity!]!
    @middleware(checks: ["permission:list-profanities"])
    @paginate(defaultCount: 10)
}

extend type Mutation @middleware(checks: ["auth"]) {
    createProfanity(
        word: String @rules(apply: ["required", "unique:profanities", "min:2", "max:255"])
    ): Profanity
        @middleware(checks: ["permission:create-profanities"])
        @field(resolver: "ProfanityMutator@create")

    updateProfanity(
        id: ID!,
        word: String
    ): Profanity
        @field(resolver: "ProfanityMutator@update")
        @middleware(checks: ["permission:update-profanities"])
        @updateProfanityValidation

    deleteProfanity(id: ID!): Profanity @delete
}
