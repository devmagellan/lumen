extend type Query @middleware(checks: ["auth"]) {
    me: User @auth
        @middleware(checks: ["permission:view-me-users"])

    users: [User]!
        @field(resolver: "UserQuery@all")
        @middleware(checks: ["permission:list-users"])

    user(id: ID): User!
        @field(resolver: "UserQuery@find")
        @middleware(checks: ["permission:view-users"])
}

extend type Mutation {
    register(
        first_name: String!
        middle_name: String
        last_name: String!
        email: String!,
        secret_phrase: String!,
        password: String!
        password_confirmation: String!
    ): User!
        @field(resolver: "Auth\\RegisterMutator@register")
        @createUserValidation

    login(email: String!, password: String!): AuthTokenType!
        @field(resolver: "Auth\\LoginMutator@login")

    forgotPassword(email: String!): MessageResponse!
        @field(resolver: "Auth\\ForgotPasswordMutator@forgotPassword")

    resetPassword(
        token: String!
        email: String!
        secret_phrase: String!
        password: String!
        password_confirmation: String!
    ): MessageResponse
        @field(resolver: "Auth\\ResetPasswordMutator@reset")
        @resetPasswordValidation
}

extend type Mutation @middleware(checks: ["auth"]) {
    refreshToken: AuthTokenType
        @field(resolver: "Auth\\LoginMutator@refresh")

    logout: Boolean
        @field(resolver: "Auth\\LoginMutator@logout")

    updateMe(user: UpdateUserInput! @spread): User!
        @field(resolver: "UserMutator@update")
        @middleware(checks: ["permission:update-me-users"])
        @updateUserValidation

    assignRoleToUser(id: ID!, role_id: ID!): MessageResponse!
        @field(resolver: "UserMutator@assignRole")
        @middleware(checks: ["permission:assign-role-to-users"])
        @assignRoleValidation

    removeRoleToUser(id: ID!, role_id: ID!): MessageResponse!
        @field(resolver: "UserMutator@removeRole")
        @middleware(checks: ["permission:remove-role-to-users"])

    givePermissionToUser(id: ID!, permission_id: ID!): MessageResponse!
        @field(resolver: "UserMutator@givePermission")
        @middleware(checks: ["permission:give-permission-to-users"])
        @givePermissionValidation

    revokePermissionToUser(id: ID!, permission_id: ID!): MessageResponse!
        @field(resolver: "UserMutator@revokePermission")
        @middleware(checks: ["permission:revoke-permission-to-users"])
}

type AuthTokenType {
    access_token: String
    token_type: String
    expires_in: Int
}

type User {
    id: ID!
    first_name: String!
    middle_name: String
    last_name: String!
    gender: String
    birthdate: Date
    email: String!
    business_email: String
    phone: String
    mobile: String
    business_phone: String
    business_phone_extension: String
    business_mobile: String
    toll_free_business_number: String
    address: String
    city: String
    state: String
    country: String
    zip_code: String
    secret_phrase: String
    fingerprint_code: String
    employments: [Employment]!
    roles: [Role]!
    permissions: [Permission]!
}

type Employment {
    id: ID!
    name: String!
    description: String
    website: String
    discount: Float
    type: String!
    supplier: String
    status: String!
    work: Work!
}

input UpdateUserInput {
    first_name: String
    middle_name: String
    last_name: String
    gender: String
    birthdate: Date
    email: String
    business_email: String
    phone: String
    mobile: String
    business_phone: String
    business_phone_extension: String
    business_mobile: String
    toll_free_business_number: String
    address: String
    city: String
    state: String
    country: String
    zip_code: String
    secret_phrase: String
    fingerprint_code: String
}
